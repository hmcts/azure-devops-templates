parameters:
  - name: nugetConfigPath
    type: string
    default: nuget.config
  - name: appName
    type: string
  - name: dockerComposeTestFile
    type: string
    default: docker-compose.tests.yml
  - name: publishNodeTests
    type: boolean
    default: false
  - name: nodeTestResultFolder
    type: string
    default: "" # Example would be $(System.DefaultWorkingDirectory)/<AppName>/<AppName>/ClientApp

steps:
  - bash: |
      sed -i "s|</configuration>|<packageSourceCredentials><vh-packages><add key=\"Username\" value=\"PAT\" /><add key=\"ClearTextPassword\" value=\"$(System.AccessToken)\" /></vh-packages></packageSourceCredentials></configuration>|" ${{ parameters.nugetConfigPath }}
    displayName: Add NuGet Feed Authentication
    workingDirectory: ${{ parameters.appName }}

  - task: DockerCompose@0
    displayName: Run Unit & Integration Tests
    env:
      SONAR_HOST: https://sonarcloud.io
      SONAR_ORG: hmcts
      SONAR_TOKEN: $(SonarLoginToken)
      SONAR_PROJECT_KEY: $(gitRepoName)
      SONAR_PROJECT_VERSION: $(Build.BuildNumber)
      SONAR_PROJECT_NAME: $(Build.Repository.Name)
    inputs:
      action: Run a Docker Compose command
      dockerComposeFile: ${{ parameters.dockerComposeTestFile }}
      projectName: $(Build.Repository.Name)
      dockerComposeCommand: up
      arguments: --build --abort-on-container-exit

  - task: PublishCodeCoverageResults@1
    displayName: "Publish Code Coverage Report"
    inputs:
      codeCoverageTool: "Cobertura"
      pathToSources: $(Build.SourcesDirectory)
      summaryFileLocation: "$(System.DefaultWorkingDirectory)/**/coverage.cobertura.xml"

  - task: PublishTestResults@2
    displayName: Publish API Test Results
    inputs:
      testResultsFormat: "VSTest" # Options: JUnit, NUnit, VSTest, xUnit, cTest
      testResultsFiles: "**/*TestResults.trx"
      searchFolder: $(System.DefaultWorkingDirectory)/TestResults
      failTaskOnFailedTests: true

  - ${{ if eq(parameters.publishNodeTests, true) }}:
      - task: PublishTestResults@2
        displayName: Publish Jasmine Test Results
        condition: eq(${{ parameters.publishNodeTests }}, true)
        inputs:
          testResultsFormat: "JUnit" # Options: JUnit, NUnit, VSTest, xUnit, cTest
          testResultsFiles: "**/TESTS.xml"
          searchFolder: ${{ parameters.nodeTestResultFolder }}
          failTaskOnFailedTests: true
