parameters:
  - name: baseAgent
    type: string
    default: Ubuntu-latest

  - name: nodeContainer
    type: string
    default: node

  - name: coreProjectPath
    type: string
    default: ''

  - name: dependantStages
    type: object
    default: []

  - name: packageManagers
    type: object
    default:
      - npm

  - name: variables
    type: object
    default: []

stages:
  - stage: NodeTest
    dependsOn:
    - ${{ if parameters.dependantStages }}:
      - ${{ parameters.dependantStages }}

    variables:
    - template: ../templates/variables/packageManagers.yml
    - ${{ each variable in parameters.variables }}:
      - ${{ each property in variable }}:
        - ${{ if eq('group', property.key) }}:
          - group: ${{ variable.group }}
        - ${{ if eq('name', property.key) }}:
          - name: ${{ variable.name }}
            value: ${{ variable.value }}

    jobs:
    - job: Build_and_Test

      pool:
        vmImage: ${{ parameters.baseAgent }}

      steps:
      - checkout: self
      
      - task: gitversion/setup@0
        displayName: Install GitVersion
        inputs:
          versionSpec: '5.6.0'

      - task: gitversion/execute@0
        displayName: Determine Version

      - template: ../templates/pipelineCaching.yml
        parameters:
          nodeProjectPath: ${{ parameters.coreProjectPath }}
          packageManagers: ${{ parameters.packageManagers }}

      - task: Npm@1
        displayName: Install Node Modules
        inputs:
          workingDir: ${{ parameters.coreProjectPath }}
          verbose: false

      - task: Npm@1
        displayName: Run Lint
        inputs:
          command: custom
          workingDir: ${{ parameters.coreProjectPath }}
          verbose: false
          customCommand: run lint

      - task: Npm@1
        displayName: Run Jasmine Tests
        inputs:
          command: custom
          workingDir: ${{ parameters.coreProjectPath }}
          verbose: false
          customCommand: run test-once-ci

      - task: PublishTestResults@2
        displayName: Publish Jasmine Test Results
        inputs:
          testResultsFiles: '*TESTS.xml'
          searchFolder: ${{ parameters.coreProjectPath }}/jasmine-tests
          mergeTestResults: true
          testRunTitle: Jasmine Test Results

      - task: PublishCodeCoverageResults@1
        displayName: Publish Jasmine Code Coverage
        inputs:
          codeCoverageTool: Cobertura
          failIfCoverageEmpty: true
          summaryFileLocation: ${{ parameters.coreProjectPath }}/coverage/cobertura-coverage.xml
          reportDirectory: ${{ parameters.coreProjectPath }}/coverage/
