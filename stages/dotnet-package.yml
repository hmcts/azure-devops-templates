parameters:
  - name: baseAgent
    type: string
    default: Ubuntu-latest

  - name: dotnetContainer
    type: string
    default: dotnetsdk

  - name: useContainer
    type: boolean
    default: false

  - name: vstsFeedId
    type: string
    default: 3f69a23d-fbc7-4541-afc7-4cccefcad773/e48b2732-376c-4052-ba97-b28783c9bab5

  - name: useNugetConfig
    type: boolean
    default: false

  - name: coreProjectPath
    type: string

  - name: nugetProjectPath
    type: string
    default: ''

  - name: nugetConfigPath
    type: string
    default: ''

  - name: nodeProjectPath
    type: string
    default: ''

  - name: dependantStages
    type: object
    default: []

  - name: packageManagers
    type: object
    default:
     - nuget

  - name: PackageApp
    type: boolean
    default: true
  - name: PackageAcceptanceTests
    type: boolean
    default: true
  - name: PackageNuget
    type: boolean
    default: false

  - name: Test
    type: boolean
    default: false

  - name: NodeTest
    type: boolean
    default: false

  - name: ACTest
    type: boolean
    default: false

  - name: testParameters
    type: object
    default: {}

  - name: nodeTestParameters
    type: object
    default: {}

  - name: releaseParameters
    type: object
    default: {}

stages:
- ${{ if or(parameters.PackageApp, parameters.PackageAcceptanceTests, parameters.ACTest, parameters.PackageNuget) }}:
  - stage: Package
    dependsOn:
    - ${{ if parameters.dependantStages }}:
      - ${{ parameters.dependantStages }}

    variables:
      - name: MSBUILDSINGLELOADCONTEXT
        value: 1
      - template: ../templates/variables/packageManagers.yml

    jobs:
    - ${{ if or(parameters.PackageApp, parameters.ACTest) }}:
      - job: Publish_App

        pool:
          vmImage: ${{ parameters.baseAgent }}

        ${{ if parameters.useContainer }}:
          container: ${{ parameters.dotnetCIToolsContainer }}

        dependsOn: []

        steps:
        - checkout: self
        
        - task: gitversion/setup@0
          displayName: Install GitVersion
          inputs:
            versionSpec: '5.6.0'

        - task: gitversion/execute@0
          displayName: Determine Version
          inputs:
            additionalArguments: /updateassemblyinfo ${{ parameters.coreProjectPath }}/AssemblyInfo.cs /ensureassemblyinfo

        - template: ../templates/pipelineCaching.yml
          parameters:
            ${{ if containsValue(parameters.packageManagers, 'nuget') }}:
              nugetProjectPath: ${{ parameters.coreProjectPath }}
            ${{ if containsValue(parameters.packageManagers, 'npm') }}:
              nodeProjectPath: ${{ parameters.nodeProjectPath }}
            ${{ if containsValue(parameters.packageManagers, 'yarn') }}:
              yarnProjectPath: ${{ parameters.nodeProjectPath }}
            packageManagers:
            - ${{ if parameters.packageManagers }}:
              - ${{ parameters.packageManagers }}

        - task: DotNetCoreCLI@2
          displayName: dotnet Restore
          inputs:
            command: restore
            projects: ${{ parameters.coreProjectPath }}/*.csproj
            restoreArguments: --locked-mode --use-lock-file
            ${{ if eq(parameters.useNugetConfig, true) }}:
              feedsToUse: config
              nugetConfigPath: ${{ parameters.nugetConfigPath }}/nuget.config
            ${{ if eq(parameters.useNugetConfig, false) }}:
              vstsFeed: ${{ parameters.vstsFeedId }}
              includeNuGetOrg: true
          condition: ne(variables.NUGET_CACHE_RESTORED, 'true')

        - task: DotNetCoreCLI@2
          displayName: donet Publish no-restore
          inputs:
            command: publish
            publishWebProjects: false
            arguments: --configuration Release --no-restore --output $(build.artifactstagingdirectory)/App
            zipAfterPublish: True
            workingDirectory: ${{ parameters.coreProjectPath }}
          condition: ne(variables.NUGET_CACHE_RESTORED, 'true')
          
        - task: DotNetCoreCLI@2
          displayName: donet Publish
          inputs:
            command: publish
            publishWebProjects: false
            arguments: --configuration Release --output $(build.artifactstagingdirectory)/App
            zipAfterPublish: True
            workingDirectory: ${{ parameters.coreProjectPath }}
          condition: eq(variables.NUGET_CACHE_RESTORED, 'true')

        - task: PublishBuildArtifacts@1
          displayName: Publish App
          inputs:
            PathtoPublish: $(Build.ArtifactStagingDirectory)/App
            ArtifactName: App

    - ${{ if or(parameters.PackageAcceptanceTests, parameters.ACTest) }}:
      - job: Publish_AcceptanceTests

        pool:
          vmImage: ${{ parameters.baseAgent }}

        ${{ if parameters.useContainer }}:
          container: ${{ parameters.dotnetCIToolsContainer }}

        dependsOn: []

        steps:
        - checkout: self
        
        - task: gitversion/setup@0
          displayName: Install GitVersion
          inputs:
            versionSpec: '5.6.0'

        - task: gitversion/execute@0
          displayName: Determine Version for AcceptanceTests
          inputs:
            additionalArguments: /updateassemblyinfo ${{ parameters.coreProjectPath }}.AcceptanceTests/AssemblyInfo.cs /ensureassemblyinfo

        - template: ../templates/pipelineCaching.yml
          parameters:
            ${{ if containsValue(parameters.packageManagers, 'nuget') }}:
              nugetProjectPath: ${{ parameters.coreProjectPath }}.AcceptanceTests
            packageManagers:
            - nuget

        - task: DotNetCoreCLI@2
          displayName: dotnet Restore
          inputs:
            command: restore
            projects: '**/*AcceptanceTests.csproj'
            restoreArguments: --locked-mode --use-lock-file
            ${{ if eq(parameters.useNugetConfig, true) }}:
              feedsToUse: config
              nugetConfigPath: ${{ parameters.nugetConfigPath }}/nuget.config
            ${{ if eq(parameters.useNugetConfig, false) }}:
              vstsFeed: ${{ parameters.vstsFeedId }}
              includeNuGetOrg: true
          condition: ne(variables.NUGET_CACHE_RESTORED, 'true')

        - task: DotNetCoreCLI@2
          displayName: donet Publish no-restore
          inputs:
            command: publish
            publishWebProjects: false
            arguments: --configuration Release --no-restore --output $(build.artifactstagingdirectory)/AcceptanceTests
            zipAfterPublish: false
            workingDirectory: ${{ parameters.coreProjectPath }}.AcceptanceTests
          condition: ne(variables.NUGET_CACHE_RESTORED, 'true')
            
        - task: DotNetCoreCLI@2
          displayName: donet Publish
          inputs:
            command: publish
            publishWebProjects: false
            arguments: --configuration Release --output $(build.artifactstagingdirectory)/AcceptanceTests
            zipAfterPublish: false
            workingDirectory: ${{ parameters.coreProjectPath }}.AcceptanceTests
          condition: eq(variables.NUGET_CACHE_RESTORED, 'true')

        - task: PublishBuildArtifacts@1
          displayName: Publish AcceptanceTests
          inputs:
            PathtoPublish: $(Build.ArtifactStagingDirectory)/AcceptanceTests
            ArtifactName: AcceptanceTests

    - ${{ if eq(parameters.PackageNuget, true) }}:
      - job: Publish_Nuget
        
        pool:
          vmImage: ${{ parameters.baseAgent }}

        ${{ if parameters.useContainer }}:
          container: ${{ parameters.dotnetCIToolsContainer }}

        dependsOn: []

        steps:
        - checkout: self
        
        - task: gitversion/setup@0
          displayName: Install GitVersion
          inputs:
            versionSpec: '5.6.0'

        - task: gitversion/execute@0
          displayName: Determine Version for AcceptanceTests
            
        - template: ../templates/pipelineCaching.yml
          parameters:
            ${{ if containsValue(parameters.packageManagers, 'nuget') }}:
              nugetProjectPath: ${{ parameters.coreProjectPath }}
            ${{ if containsValue(parameters.packageManagers, 'npm') }}:
              nodeProjectPath: ${{ parameters.nodeProjectPath }}
            ${{ if containsValue(parameters.packageManagers, 'yarn') }}:
              yarnProjectPath: ${{ parameters.nodeProjectPath }}
            packageManagers:
            - ${{ if parameters.packageManagers }}:
              - ${{ parameters.packageManagers }}

        - task: DotNetCoreCLI@2
          displayName: dotnet Restore
          inputs:
            command: restore
            projects: ${{ parameters.nugetProjectPath }}/*.csproj
            restoreArguments: --locked-mode --use-lock-file
            ${{ if eq(parameters.useNugetConfig, true) }}:
              feedsToUse: config
              nugetConfigPath: ${{ parameters.nugetConfigPath }}/nuget.config
            ${{ if eq(parameters.useNugetConfig, false) }}:
              vstsFeed: ${{ parameters.vstsFeedId }}
              includeNuGetOrg: true
          condition: ne(variables.NUGET_CACHE_RESTORED, 'true')

        - task: DotNetCoreCLI@2
          displayName: donet Build Nuget Project
          inputs:
            ${{ if eq(variables['Build.SourceBranch'], 'refs/heads/master')}}:
              arguments: '--configuration release /p:Version="$(GitVersion.NuGetVersion)" /p:PackageOutputPath="$(Build.ArtifactStagingDirectory)"'
            ${{ if ne(variables['Build.SourceBranch'], 'refs/heads/master')}}:
              arguments: '--configuration release /p:Version="$(GitVersion.NuGetVersion)" /p:PackageOutputPath="$(Build.ArtifactStagingDirectory)" /p:VersionSuffix="-alpha"'
            workingDirectory: ${{ parameters.nugetProjectPath }}

        - task: DotNetCoreCLI@2
          displayName: Push Package to VH NuGet Store
          inputs:
            command: push
            searchPatternPush: '$(Build.ArtifactStagingDirectory)/*.nupkg'
            publishVstsFeed: ${{ parameters.vstsFeedId }}
            versioningScheme: byBuildNumber

- ${{ if ne(variables['Build.Reason'], 'IndividualCI') }}:
  - ${{ if eq(parameters.Test, true) }}:
    - template: ./dotnet-test.yml
      parameters:
        packageManagers: ${{ parameters.packageManagers }}
        ${{ insert }}: ${{ parameters.testParameters }}

  # - ${{ if eq(parameters.NodeTest, true) }}:
  #   - template: ./node-test.yml
  #     parameters:
  #       ${{ insert }}: ${{ parameters.nodeTestParameters }}

  - ${{ if eq(parameters.ACTest, true)}}:
    - template: ./dotnet-release.yml
      parameters:
        dependantStages: Package
        useCurrentPipeline: true
        stageName: AcceptanceTest
        runZapTests: ${{ coalesce(parameters.releaseParameters.runZapTests, true) }}
        ${{ each setting in parameters.releaseParameters }}:
          ${{ if ne(setting.key, 'runZapTests') }}:
            ${{ setting.key }}: ${{ setting.value }}
