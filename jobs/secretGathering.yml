parameters:
  - name: baseAgent
    type: string
    default: Ubuntu-16.04

  - name: keyVault
    type: string

  - name: subscription
    type: string

  - name: secrets
    type: object

  - name: dependantJobs
    type: object
    default: []

  - name: variables
    type: object
    default: []

jobs:
  - job: Secret_Gathering
    displayName: Collect Secrets
    pool:
        vmImage: ${{ parameters.baseAgent }}
    
    variables:
    - ${{ each variable in parameters.variables }}:
      - ${{ each property in variable }}:
        - ${{ if eq('group', property.key) }}:
          - group: ${{ variable.group }}
        - ${{ if eq('name', property.key) }}:
          - name: ${{ variable.name }}
            value: ${{ variable.value }}

    steps:
    - checkout: none

    - task: AzureCLI@2
      displayName: Add KeyVault FW Exception
      inputs:
        azureSubscription: ${{ parameters.subscription }}
        scriptType: pscore
        scriptLocation: inlineScript
        inlineScript: |
          $ip = (Invoke-WebRequest -uri "http://ifconfig.me/ip").Content
          az keyvault network-rule add --name $env:keyVaultName --ip-address "$IP/32"
      env:
        keyVaultName: ${{ parameters.keyVault }}

    - task: AzureKeyVault@1
      displayName: Gather Test Secrets
      inputs:
        azureSubscription: ${{ parameters.subscription }}
        KeyVaultName: ${{ parameters.keyVault }}
        SecretsFilter: ${{ join(',', parameters.secrets.*.secretref) }}

    - task: AzureCLI@2
      displayName: Remove KeyVault FW Exception
      condition: always()
      inputs:
        azureSubscription: ${{ parameters.subscription }}
        scriptType: pscore
        scriptLocation: inlineScript
        inlineScript: |
          $ip = (Invoke-WebRequest -uri "http://ifconfig.me/ip").Content
          az keyvault network-rule remove --name $env:keyVaultName --ip-address "$IP/32"
      env:
        keyVaultName: ${{ parameters.keyVault }}

    - pwsh: |
        $script = @()
        Get-ChildItem ENV: | Where-Object -FilterScript { $_.Name -imatch "^secrets_((|active|deployment)_(.+))" } | Foreach-Object -Process {
          Write-Host "##vso[task.setvariable variable=$($matches[1]);issecret=false;isOutput=true]$($_.Value)"
        }
      displayName: Set Secrets As Output variables
      name: SetSecretVariables
      env:
        ${{ each secret in parameters.secrets }}:
          ${{ if eq(secret.secret, true)}}:
            "secrets_${{secret.slot}}_${{ secret.appsetting }}": $[${{ secret.value }}]
          ${{ if ne(secret.secret, true)}}:
            "secrets_${{secret.slot}}_${{ secret.appsetting }}": ${{ secret.value }}
