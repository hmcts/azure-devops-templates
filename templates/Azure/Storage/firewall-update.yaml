parameters:
    - name: subscriptionName
      type: string
    - name: resourceGroupName
      type: string
    - name: storageAccountName
      type: string
    - name: action
      type: string
      values:
      - Deny
      - Allow
      - Disabled
    - name: alwaysRun
      type: boolean
      default: false

steps:
  - ${{ if or( eq(parameters.action, 'Deny' ), eq(parameters.action, 'Allow') )}}:
    - task: AzureCLI@2
      displayName: Update network default action to '${{ parameters.action }}' for ${{ parameters.storageAccountName }}
      ${{ if eq(parameters.alwaysRun, true ) }}:
        condition: always() 
      inputs:
        azureSubscription: '${{parameters.subscriptionName}}'
        scriptType: 'pscore'
        scriptLocation: 'inlineScript'
        inlineScript: |
          $storageAccountName = "${{ parameters.storageAccountName }}"
          $resourceGroupName = "${{ parameters.resourceGroupName }}"
          $action = "${{ parameters.action }}"
          $wait = 10
          $n = 10

          Write-Host "Starting Task: Update network defualt action to '$action' for '$storageAccountName'"
          az storage account update -g $resourceGroupName --name $storageAccountName --default-action $action --public-network-access Enabled 
          Write-Host "Updated, checking it applied..."

          $accessKey = (az storage account keys list -g $resourceGroupName -n $storageAccountName | ConvertFrom-Json)[0].value

          $i = 1

          if($action -eq "Allow"){
            do { 
              Write-Host "[$i/$n] Testing Storage Account Connectivity, This May Take A Few Attempts, Please Wait..."
              $status = az storage container list --account-name $storageAccountName  --account-key $accessKey

              if($status) {
                Write-Host "Connection successful"
              } else {
                Write-Host "Connection failed, trying again in $wait second(s)"
                Start-Sleep -Seconds $wait
                $i ++
              }
            } 
            Until ($Status -or ($i -ge $n))
            if(!($status)) {
              Write-Host "##vso[task.LogIssue type=error;]FAILED - Connection could not be made in time."
              exit 1
            }
          } else {
            do { 
              Write-Host "[$i/$n] Testing Storage Account Connectivity, This May Take A Few Attempts, Please Wait..."
              $status = az storage container list --account-name $storageAccountName  --account-key $accessKey

              if(!($status)) {
                Write-Host "Connection successfully failed >_<"
                exit 0
              } else {
                Write-Host "Connection successful (should fail), trying again in $wait second(s)"
                Start-Sleep -Seconds $wait
                $i ++
              }
            } 
            Until (!($Status) -or ($i -ge $n))

            if($status) {
              Write-Host "##vso[task.LogIssue type=error;]FAILED - Connection is still available after given time."
              exit 1
            }
          }

  - ${{ if eq(parameters.action, 'Disabled' ) }}:
    - task: AzureCLI@2
      displayName: Disable public network access for '${{ parameters.storageAccountName }}'
      ${{ if eq(parameters.alwaysRun, true ) }}:
        condition: always() 
      inputs:
        azureSubscription: '${{parameters.subscriptionName}}'
        scriptType: 'pscore'
        scriptLocation: 'inlineScript'
        inlineScript: |
          $storageAccountName = "${{ parameters.storageAccountName }}"
          $resourceGroupName = "${{ parameters.resourceGroupName }}"
          $action = "${{ parameters.action }}"
          $wait = 10
          $n = 10

          Write-Host "Starting Task: Disable public network access for '$storageAccountName'"
          az storage account update -g $resourceGroupName --name $storageAccountName --public-network-access Disabled
          Write-Host "Updated, checking it applied..."

          $i = 1
          do { 
            Write-Host "[$i/$n] Testing Storage Account Connectivity, This May Take A Few Attempts, Please Wait..."
            $status = az storage container list --account-name $storageAccountName  --account-key $accessKey

            if(!($status)) {
              Write-Host "Connection successfully failed >_<"
              exit 0
            } else {
              Write-Host "Connection successful (should fail), trying again in $wait second(s)"
              Start-Sleep -Seconds $wait
              $i ++
            }
          } 
          Until (!($Status) -or ($i -ge $n))

          if($status) {
            Write-Host "##vso[task.LogIssue type=error;]FAILED - Connection is still available after given time."
            exit 1
          }