parameters:
  - name: application
    type: string
  - name: source
    type: string
  - name: streamName
    type: string
  - name: subscriptionName
    type: string
  - name: storageAccount
    type: string
  - name: storageContainer
    type: string

steps:
  - bash: |
      sudo apt update
      sudo apt install ffmpeg
      ffmpeg -version
    displayName: Download FFMPEG
    name: ffmpeg

  - powershell: |
      $source="https://filesamples.com/samples/video/mp4/sample_640x360.mp4"
      
      $currentPath=Get-Location
      $downloadPath="$currentPath/audio"
      if ((Test-Path -Path $downloadPath) -eq $false) {
        mkdir $downloadPath 
      }
      $output="$downloadPath/audio-example.mp4"

      ## DOWNLOAD AUDI
      if ((Test-Path -Path $output) -eq $false) {
        Invoke-WebRequest -Uri $source -OutFile $output 
      }

      Write-Host "##vso[task.setvariable variable=path;isOutput=true]$output"
    displayName: Download Audio Sample
    name: audio
  
  - bash: |
      application="${application}"
      audioFilePath="${audioPath}"
      fileName="${streamName}"
      source="${source}"
 
      ffmpeg_url="rtmps://$source:443/$application/$fileName"

      echo "URL: $ffmpeg_url"
      echo "Audio Path: $audioFilePath"

      ffmpeg -re -i $audioFilePath -c copy -f flv "$ffmpeg_url flashver=FMLE/3.0\20(compatible;\20FMSc/1.0) live=true pubUser=wowza title=$fileName" -loglevel verbose
    env:
      audioPath: $(audio.path)
      application: ${{ parameters.application }}
      source: ${{ parameters.source }}
      streamName: ${{ parameters.streamName }}
    displayName: Run FFMPEG

  - task: AzureCLI@2
    displayName: Validate Stream ${{ parameters.streamName }}
    inputs:
      azureSubscription: '${{parameters.subscriptionName}}'
      scriptType: 'pscore'
      scriptLocation: 'inlineScript'
      inlineScript: |
        $containerName = "${{ parameters.storageContainer }}"
        $folderLocation = "${{ parameters.application }}"
        $streamName = "${{ parameters.streamName }}"
        $accountName = "${{ parameters.storageAccount }}"

        $blobSearch = "$folderLocation/$streamName"
        Write-Host "Searching for $blobSearch in Container:$containerName in Storage Account:$accountName"

        $blobs = az storage blob list -c $containerName --prefix $blobSearch --account-name $accountName --only-show-errors -o json | ConvertFrom-Json

        $completed = $true
        if ($blobs.Length -lt 1) {
          Write-Host "task.LogIssue type=error;]FAILED - No recordings found"
          $completed = $false
        }
        else {

          $recording = $blobs[0];

          if ($recording.properties.contentLength -lt 1) {
            Write-Host "task.LogIssue type=error;]FAILED - Recording size is 0"
            $completed = $false
          }
        }

        if ($completed -eq $true) {
          Write-Host '##vso[task.complete result=Succeeded;]DONE'
        }
        else {
          Write-Host '##vso[task.complete result=Failed;]FAILED'
        }