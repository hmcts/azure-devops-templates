
steps:
  - powershell: |
      $path = "C:\Users\patemanc\pateman.workspace\CodeRepo\hmcts\pip-shared-infrastructure\terraform"

        $files = Get-ChildItem -Path $path -Recurse | Where-Object { ! $_.PSIsContainer -AND $_.Name -eq "output.tf" }
        Write-Host "Files Found " + $files.length

        function RemoveLineCarriage($object) {
        $result = [System.String] $object;
        $result = $result -replace "`t", "";
        $result = $result -replace "`n", "";
        $result = $result -replace "`r", "";
        $result = $result -replace " ;", ";";
        $result = $result -replace "; ", ";";
                
        $result = $result -replace [Environment]::NewLine, "";
                
        $result;
        }

        $failedOutputs = @()
        $potentialOutputs = @()
        foreach ($file in $files) {
        $content = Get-Content -Path $file.FullName
        $content = RemoveLineCarriage -object $content

        if ($content -like "*password*") {

            $outputs = $content -Split "output"
            foreach ($output in $outputs) {

            if ($output.Length -gt 5) {
                $outputName = $output.Substring(0, $output.IndexOf("{")).Replace('"', '')
                #Write-Host "outout - $output"
                # split by . so you get the last section of an TF resource address, so we are only validating the name of the attribute
                # e.g. azuread_application_password.app_pwd.display_name on check 'display_name'
                $outputArr = $output.Split(".");
                $resourceAttribute=$outputArr[$outputArr.length - 1];
                Write-Host $resourceAttribute

                if ($resourceAttribute -like "*password*") {
                $outputStr = $output -replace '\s', ''
                Write-Host " "
                Write-Host "Password output $outputName"
                Write-Host $outputStr

                if ($outputStr -like '*sensitive=true*') {
                    Write-Host "$outputName Succeeded"
                }
                else {
                    Write-Error "$outputName Failed"
                    $failedOutputs = $failedOutputs + $outputName
                }
                }
                elseif ($output -like "*secret*") {
                Write-Warning " "
                Write-Warning "Potential error $outputName"
                $potentialOutputs = $potentialOutputs + $outputName
                }
            }
            }
        }
        }

        ## Report Task
        Write-Host " "
        if ($failedOutputs.length -gt 0) {
            Write-Host '##vso[task.complete result=Failed;]FAILED'
        }
        elseif ($potentialOutputs.length -gt 0) {
            Write-Host '##vso[task.complete result=SucceededWithIssues;]WARNING'
        }
        else {
            Write-Host '##vso[task.complete result=Succeeded;]DONE'
        }
    displayName: "Validate Secrets are secure"
