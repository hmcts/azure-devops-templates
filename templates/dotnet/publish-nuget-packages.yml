parameters:
  - name: nugetProjectPath
    type: string

  - name: packageVersion
    type: string
    default: ''

  - name: vstsFeed
    type: string

  - name: gitVersionConfigPath
    type: string
    default: ''

steps:

- powershell: |
    Write-Host "##vso[task.setvariable variable=BuildNum;]$(Build.BuildNumber)"
    Write-Host "$(Build.BuildNumber)"
  displayName: Get BuildNumber

- ${{ if eq(parameters.packageVersion, '') }}:
  - task: gitversion/setup@3.0.3
    displayName: Install Git Version
    inputs:
      versionSpec: '6.0.x'
      
  - task: gitversion/execute@3.0.3
    displayName: Run Git Version
    inputs:
      ${{ if ne(parameters.gitVersionConfigPath, '') }}:
        useConfigFile: true
        configFilePath: '${{ parameters.gitVersionConfigPath }}'
      ${{ else }}:
        useConfigFile: false
              
- task: DotNetCoreCLI@2
  displayName: dotnet restore
  inputs:
    command: restore
    projects: ${{ parameters.nugetProjectPath }}/*.csproj
    vstsFeed: ${{ parameters.vstsFeed }}
    verbosityLevel: Minimal

- task: DotNetCoreCLI@2
  displayName: Create Build NuGet Project
  inputs:
    ${{ if eq(parameters.packageVersion, '') }}:
      arguments: '--configuration release /p:Version="$(GitVersion.NuGetVersion)" /p:PackageOutputPath="$(Build.ArtifactStagingDirectory)"'
    ${{ else }}:
      arguments: '--configuration release /p:Version="${{ parameters.packageVersion }}" /p:PackageOutputPath="$(Build.ArtifactStagingDirectory)"'
    versioningScheme: byBuildNumber
    projects: '${{ parameters.nugetProjectPath }}/*.csproj'

- task: NuGetCommand@2
  displayName: Push NuGet Packages
  inputs:
    command: push
    packagesToPush: '$(Build.ArtifactStagingDirectory)/*.nupkg'
    publishVstsFeed: ${{ parameters.vstsFeed }}
    versioningScheme: byBuildNumber
    allowPackageConflicts: true

- powershell: |
    Write-Host "##vso[build.updatebuildnumber]$(BuildNum)"
  displayName: Set Build.BuildNumber