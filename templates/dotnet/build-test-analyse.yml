parameters:
  - name: nugetConfigPath
    type: string
    default: nuget.config
  - name: appName
    type: string
  - name: dockerComposeTestFile
    type: string
    default: docker-compose.tests.yml
  - name: publishNodeTests
    type: boolean
    default: false
  - name: nodeTestResultFolder
    type: string
    default: '' # Example would be $(System.DefaultWorkingDirectory)/<AppName>/<AppName>/ClientApp
  - name: sonarExtraProperties
    default: ''
  - name: dotnetversion
    default: '8.x'
  - name: vstsFeedId
    type: string
    default: 'cf3711aa-2aed-4f62-81a8-2afaee0ce26d/8415803c-cd1a-445d-b84a-e8b04359fdc4'

steps:
  - template: ../sonarCloud/prepare.yml
    parameters:
      ExtraProperties: ${{ parameters.sonarExtraProperties }}

  - task: UseDotNet@2
    displayName: Set DotNet Version
    inputs:
      version: ${{ parameters.dotnetversion }}

  - task: NuGetAuthenticate@1

  - task: DotNetCoreCLI@2
    displayName: Restore DotNet Solution # needed for sonar since AutoScan does not support c#
    timeoutInMinutes: 10
    inputs:
      command: restore
      projects: '*/*.sln'
      # ${{ if ne(parameters.nugetConfigPath, '') }}:
      #   feedsToUse: config
      #   nugetConfigPath: ${{ parameters.nugetConfigPath }}/nuget.config
      ${{ if ne(parameters.vstsFeedId, '') }}:
        vstsFeed: ${{ parameters.vstsFeedId }}
        includeNuGetOrg: true
      arguments: '--configuration Release'

  - task: DotNetCoreCLI@2
    displayName: Build DotNet # needed for sonar since AutoScan does not support c#
    timeoutInMinutes: 10
    inputs:
      projects: '*/*.sln'
      ${{ if ne(parameters.vstsFeedId, '') }}:
        vstsFeed: ${{ parameters.vstsFeedId }}
        includeNuGetOrg: true
      arguments: '--configuration Release'

  - bash: |
      echo "Listing vulnerable NuGet packages..."
      dotnet list package --vulnerable --include-transitive --format json > $(Build.ArtifactStagingDirectory)/vulnerable_packages.json
    displayName: List Vulnerable NuGet Packages
    workingDirectory: ${{ parameters.appName }}

  - bash: |
      #!/bin/bash

      # Read the JSON file
      json_file="$(Build.ArtifactStagingDirectory)/vulnerable_packages.json"
      sarif_file="$(Build.ArtifactStagingDirectory)/vulnerable_packages.sarif"

      # Initialize SARIF structure
      sarif=$(cat <<EOF
      {
        "version": "2.1.0",
        "\"$schema\": \"http://json.schemastore.org/sarif-2.1.0-rtm.5\",",
        "runs": [
          {
            "tool": {
              "driver": {
                "name": "dotnet list package --vulnerable",
                "informationUri": "https://docs.microsoft.com/en-us/dotnet/core/tools/dotnet-list-package",
                "rules": []
              }
            },
            "results": []
          }
        ]
      }
      EOF
      )

      # Parse the JSON and build SARIF
      rules=()
      results=()

      while IFS= read -r project; do
        project_path=$(echo "$project" | jq -r '.path')
        frameworks=$(echo "$project" | jq -c '.frameworks[]?')

        for framework in $frameworks; do
          packages=$(echo "$framework" | jq -c '.topLevelPackages[]?, .transitivePackages[]?')

          for package in $packages; do
          package_id=$(echo "$package" | jq -r '.id')
          resolved_version=$(echo "$package" | jq -r '.resolvedVersion')
          vulnerabilities=$(echo "$package" | jq -c '.vulnerabilities[]?')

          for vulnerability in $vulnerabilities; do
            advisory_url=$(echo "$vulnerability" | jq -r '.advisoryurl')
            severity=$(echo "$vulnerability" | jq -r '.severity')
            rule_id="${package_id}-${advisory_url}"

            # Map severity levels
            case "$severity" in
              "moderate")
                level="warning"
                ;;
              "high" | "critical")
                level="error"
                ;;
              *)
                level="note"
                ;;
            esac

              if [[ ! " ${rules[@]} " =~ " ${rule_id} " ]]; then
                rules+=("$rule_id")
                rule=$(cat <<EOF
      {
        "id": "$rule_id",
        "name": "$package_id",
        "fullDescription": {
          "text": "Vulnerability in $package_id version $resolved_version"
        },
        "helpUri": "$advisory_url",
        "properties": {
          "severity": "$severity"
        }
      }
      EOF
                )
                sarif=$(echo "$sarif" | jq ".runs[0].tool.driver.rules += [$rule]")
              fi

              result=$(cat <<EOF
      {
        "ruleId": "$rule_id",
        "level": "${severity,,}",
        "message": {
          "text": "Vulnerability in $package_id version $resolved_version: $advisory_url"
        },
        "locations": [
          {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "$project_path"
              }
            }
          }
        ]
      }
      EOF
              )
              sarif=$(echo "$sarif" | jq ".runs[0].results += [$result]")
            done
          done
        done
      done < <(jq -c '.projects[]' "$json_file")

      # Write SARIF to file
      echo "$sarif" > "$sarif_file"

      # Ensure the SARIF file is in UTF-8 format
      iconv -f UTF-8 -t UTF-8 "$sarif_file" -o "$sarif_file"
    displayName: 'Convert vulnerable packages to SARIF format'

  - task: PublishBuildArtifacts@1
    displayName: 'Publish SARIF artifact'
    inputs:
      pathToPublish: '$(Build.ArtifactStagingDirectory)/vulnerable_packages.sarif'
      artifactName: 'VulnerabilityReport'

  # - template: ../../stages/dotnet-tests/unit-and-integration-tests-container.yml
  #   parameters:
  #     nugetConfigPath: ${{ parameters.nugetConfigPath }} # remove this once the sds config file is removed
  #     appName: ${{ parameters.appName }}
  #     dockerComposeTestFile: ${{ parameters.dockerComposeTestFile }}
  #     publishNodeTests: ${{ parameters.publishNodeTests }}
  #     nodeTestResultFolder: ${{ parameters.nodeTestResultFolder }}

  - template: ../sonarCloud/runAnalysis.yml
